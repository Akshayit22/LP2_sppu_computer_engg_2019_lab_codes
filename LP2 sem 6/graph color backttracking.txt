import java.util.Arrays;

public class GraphColoringBacktracking {
    public static void main(String[] args) {
        int[][] graph = {
            {0, 1, 1, 0, 1},
            {1, 0, 1, 1, 0},
            {1, 1, 0, 1, 1},
            {0, 1, 1, 0, 1},
            {1, 0, 1, 1, 0}
        };
        int numColors = 3;

        int[] colors = graphColoring(graph, numColors);
        printSolution(colors);
    }

    public static int[] graphColoring(int[][] graph, int numColors) {
        int numVertices = graph.length;
        int[] colors = new int[numVertices];
        Arrays.fill(colors, 0);

        if (graphColoringUtil(graph, numColors, colors, 0)) {
            return colors;
        } else {
            return new int[numVertices]; // No valid coloring exists
        }
    }

    public static boolean graphColoringUtil(int[][] graph, int numColors, int[] colors, int vertex) {
        int numVertices = graph.length;
        if (vertex == numVertices) {
            return true; // All vertices have been assigned a color
        }

        for (int color = 1; color <= numColors; color++) {
            if (isSafe(graph, colors, vertex, color)) {
                colors[vertex] = color;

                if (graphColoringUtil(graph, numColors, colors, vertex + 1)) {
                    return true;
                }

                colors[vertex] = 0; // Backtrack and try a different color
            }
        }

        return false; // No valid coloring found
    }

    public static boolean isSafe(int[][] graph, int[] colors, int vertex, int color) {
        for (int i = 0; i < graph.length; i++) {
            if (graph[vertex][i] == 1 && colors[i] == color) {
                return false; // Adjacent vertex has the same color
            }
        }
        return true;
    }

    public static void printSolution(int[] colors) {
        System.out.println("Vertex\tColor");
        for (int i = 0; i < colors.length; i++) {
            System.out.println(i + "\t" + colors[i]);
        }
    }
}
